Attributes

So back to our blueprint analogy, we've started with a description of what our blueprint-object can do, but the other alternative to describe something is to describe characteristics it might have which we call attributes.
An attribute is created in order to describe the state of our object - color, size, etc. Alternatively, attributes can also be called instance variables. In this tab, we'll go over two ways of adding attributes to objects.

Say we had an empty Cat class and then we made an instance of this class:
        class Cat(object):
          pass

We could then add individual attributes to this instance and print the attributes:
        garfield = Cat()
        garfield.color = "orange"
        garfield.type = "fat"
        garfield.age = 5
        print "Garfield's color:", garfield.color
        print "Garfield's type:", garfield.type
        print "Garfield's age:", garfield.age

Now, imagine if we made 100 more instances of Cat. You may realize that adding these attributes individually for every single one of our cats would be a painstaking process.

Using __init__() to initialize attribute values

In order to guarantee that all of the instance variables exist during the entire life of the object, it is best to initialize them with the   __init__() method. We learned about this method in the previous tab, in case you forgot!

Let's try this, by redefining our Cat class:
class Cat(object):
          def __init__(self, color, type, age):
            self.color = color
            self.type = type
            self.age = age

Creating new cats, we don't have to add each attribute every time -- we simply pass in arguments when we create new instances:
            garfield = Cat('orange', 'fat', 5)
            print "Garfield's color:", garfield.color
            print "Garfield's type:", garfield.type
            print "Garfield's age:", garfield.age

To apply this idea to our Human class, let's make some changes to our __init__ function:
class Human(object):
            def __init__(self, clan=None):
              print "New Human!!!"     # when we create a new human, we'll get self as an output
                                       # initialize the clan instance variable by passing in a value
              self.clan = clan
              # initialize more attributes that will be the same for all humans
              self.health = 100
              self.strength = 3
              self.intelligence = 3
              self.stealth = 3
            def taunt(self):
              print "You want a piece of me?"
        # create an instance of a human, pass in a clan name
        michael = Human('CodingDojo')
        jimmy = Human('CodingNinjas')

Now when we create a new human, we'll be notified with a printed message and will also set our attributes describing our human. We'll need to pass a custom clan name as an argument when creating our new human but also notice how we hard-coded the values for the other attributes. This is because we want every new human to have the same values for health, strength, intelligence, and stealth! If you print out the attributes of the two instances we created you'll see that the clans are different but all the others are the same.

Default Parameter Values

Sometimes, when we are setting up our initialize function, we may want to have default values for certain parameters. We did this above in our Human class. We'll illustrate this by defining a new class:

          class Test(object):
            def __init__(self, phrase='Nothing was passed'):     # set the default value for 'phrase' parameter
              print "This string was passed in: " + phrase
              self.phrase = phrase

Now, let's create two instances one with an argument and one without:
            test1 = Test('Hello, World!')
            test2 = Test()
            print "Test 1 has phrase: '" + test1.phrase + "'"
            print "Test 2 has phrase, '" + test2.phrase + "'"

Run in our terminal here is our output:
            This string was passed in: Hello, World!
            This string was passed in: Nothing was passed
            Test 1 has phrase: 'Hello, World!'
            Test 2 has phrase, 'Nothing was passed'

When we passed in a value, the __init__ method executed with the argument we passed. But when we did not, the __init__ method executed with the default value we defined for the phrase parameter.
