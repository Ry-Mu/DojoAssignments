Queries Continued

For this section, we'll be using the following model:

        class User(models.Model):
          first_name = models.CharField(max_length=25)
          last_name = models.CharField(max_length=25)
          age = models.IntegerField()
          created_at = models.DateTimeField(auto_now_add=True)
          updated_at = models.DateTimeField(auto_now=True)
          def __str__(self):
            return self.first_name + " " + self.last_name

What's the last part? You might recognize it as a magic method from the OOP chapter. Basically, it tells Python what to do when we try to convert a User object into a string, so that when I print these objects in the terminal, they'll show as <User: Firstname Lastname> instead of <User: User object>. It's not required to make the code run, but it's pretty convenient!

We currently have eight users in our database:

Get

.get(field="val") returns the one object that matches a given condition. If we wanted the one user with last name "Thomas", we could say:
          user = User.objects.get(last_name="Thomas")
          print("QUERY RESULT:", user)

However, if the condition is true for more than one item, or zero item, using .get will throw an error. Only use .get if you know that there's only one matching item! For this reason, this is a very good method to use with ID numbers.

          user = User.objects.get(id=6)
           print("QUERY RESULT:", user)

Filter

.filter(field="val"...) returns all of the records where a given condition is true. Here's how we'd find all of the "Thomas"es:

          user = User.objects.filter(last_name="Thomas")
          print("QUERY RESULT:", user)

What's the difference between .get and .filter in this case? Note that .get returns the object itself, while .filter returns a QuerySet (a special type of list that holds Django objects). If we changed the code to look like this:

        user = User.objects.filter(last_name="Thomas")
         print("QUERY RESULT:", user.first_name)

...we would get an error, because a QuerySet doesn't have a .first_name:

However, because it's returning a QuerySet and not an object, .filter has no problem if there's not exactly one matching record.

            user = User.objects.filter(first_name="Horace")
            print("QUERY RESULT:", user)

Exclude

.exclude(field="val"...) is the opposite of .filter: It returns all of the records where a given condition is false. Here's every user NOT surnamed "Thomas":

          user = User.objects.exclude(last_name="Thomas")
            print("QUERY RESULT:", user)


Conditions

You can do a more complicated search than just if a given field is equal to a given value. Instead of just passing in the field name as a keyword argument to .get, .filter, or .exclude, you'd pass the field name__lookup type (that's a double underscore, also known as a "dunder" for people on-the-go). For instance, to find users whose first name begins with "S":


            user = User.objects.filter(first_name__startswith="S")
            print("QUERY RESULT:", user)

That's not the only type of search you can do. Here's everyone whose first name does not contain an "E":

            user = User.objects.exclude(first_name__contains="E")
            print("QUERY RESULT:", user)

Every user older than 80:
          user = User.objects.filter(age__gt=80)
           print("QUERY RESULT:", user)

Every user 80 or older (see the difference?):

          user = User.objects.filter(age__gte=80)
          print("QUERY RESULT:", user)

Combining queries

Queries can be chained together:

        user = User.objects.filter(last_name__contains="o").exclude(first_name__contains="o")
        print("QUERY RESULT:", user)


        user = User.objects.filter(age__lt=70).filter(first_name__startswith="S")
 print("QUERY RESULT:", user)

If it's the same type of query, instead of being chained you can add multiple arguments to the function:

      user = User.objects.filter(age__lt=70, first_name__startswith="S")
      print("QUERY RESULT:", user)

These are cases where the conditions are joined with AND, as in, all users younger than 70 AND whose first name starts with "S". If you want OR, as in users who are younger than 70 OR whose first_name starts with "S", you can use | (the set union operator):

      user = User.objects.filter(age__lt=70)|User.objects.filter(first_name__startswith="S")
       print("QUERY RESULT:", user)

Displaying on Templates
So far, we've only printed these objects to our terminal. However, it's not difficult to display this information on a template. How do we pass information from our view function into a template? With a context dictionary!

...user_orm_example_project/apps/users/views.py

        def index(request):
          users = User.objects.filter(age__lt=70)|User.objects.filter(first_name__startswith="S")
          context = {"users": users}
          return render(request, "users/index.html", context)

On the template, we can use a for-loop to go over this data.

...user_orm_example_project/apps/users/index.html

        <h1>Users</h1>
        <table>
          <tr>
            <th>ID</th>
            <th>First Name</th>
            <th>Last Name</th>
            <th>Age</th>
          </tr>
          {% for user in users %}
            <tr>
              <td>{{user.id}}</td>
              <td>{{user.first_name}}</td>
              <td>{{user.last_name}}</td>
              <td>{{user.age}}</td>
            </tr>
          {% endfor %}
        </table>

All of the methods mentioned above go to the model and run a preset query from the model as defined by the ORM. We intentionally left some info out about how to use the ORM.

To become a self-sufficient developer, you need to get comfortable searching through the documentation and other resources. No pain (at least 20 minutes worth...), no gain!

Here are the code snippets from the video for reference.

in index.html
