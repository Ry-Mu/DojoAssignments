ManyToMany Relationships

You may remember that in order to use a many-to-many relationship in SQL, you had to construct a third, linking table with foreign key relationships to the two tables you wanted to connect. Django will do this for you automatically, if your model includes a ManyToManyField. We'll use these models as an example:

          class Book(models.Model):
          	title = models.CharField(max_length=255)
          	created_at = models.DateTimeField(auto_now_add=True)
          	updated_at = models.DateTimeField(auto_now=True)

          class Publisher(models.Model):
          	name = models.CharField(max_length=255)
          	books = models.ManyToManyField(Book, related_name="publishers")
          	created_at = models.DateTimeField(auto_now_add=True)
          	updated_at = models.DateTimeField(auto_now=True)

As you can see, each publisher can publish many books, and each book can be published by many publishers. Unlike with a ForeignKey, it doesn't matter which model has the ManyToManyField. The model would still work if the Book model has a field named publishers instead.

Adding a relationship between two existing records is simple:

        this_book = Book.objects.get(id=4)
        this_publisher = Publisher.objects.get(id=2)
        this_publisher.books.add(this_book)

The syntax to see all books from a given publisher is the same as when doing a reverse look-up on a ForeignKey relationship: this_publisher.books.all() in your views.py, or this_publisher.books.all in a template.

ManyToManyFields are automatically symmetrical. That is, by adding a book to a publisher, Django will also automatically add the publisher to the book. This means that we can add or look up from the other end without issue, assuming we've specified a related name so that Django knows how to refer to the field in the other model. this_book.publishers.add(this_publisher) is the same as this_publisher.books.add(this_book), and this_book.publishers.all() will return all publishers of a given book.
