Functions

A function is a named block of code that we can execute to perform a specific task.
More simply, a function is a list of instructions that you can run at any time.
If you find something that you seem to be using over and over again, it might be best to have a way to streamline the process.
A function can optionally take in parameters, perform a series of instructions, and optionally return something afterwards. Here's an example:
        def add(a,b):
          x = a + b
          return x
        # the return value gets assigned to the "result" variable
        result = add(3,5)
        print result # this should print 8

Think of the function as a factory. If we were building a new car we would:

1. Acquire raw materials (variables) needed for creating a car.
2. Send the raw materials(invoke and pass arguments) to a car manufacturing plant (function)
3. Do something (process) with the raw materials(parameters)
4. Drive the car (function's return value)

The factory has all the instructions to build a new car and will perform all the tasks.
When you want a new car, all you have to do is call the factory to request a new car.

The advantages of using functions are:

Reducing the duplication of code
Breaking down complex problems into simpler pieces
Improving clarity of code
Hiding information


Functions in Python are known as "First Class"

Like most modern programming languages, Functions in Python are First-Class Functions. This means that they can basically go wherever they want!

-Functions can be stored as standalone functions
-Functions can be defined inside Classes/Instances (known as methods)
-Functions can be passed as arguments to functions (known as callbacks)
-Functions can be returned from functions (creating a closure)
-Functions can be anonymous which are stored in variables/used only one time (known as lambdas)

Syntax

For now, we'll focus on standalone functions to get you familiar with the different aspects of functions.

Pay attention to a few details. The def keyword signifies the declaration of a function. This indicates that the following code is a function and assigns a name to that function, so we can call it later. Parameters are information we input into a function, and appear inside the parenthesis that follow the function name.

Here's a basic example of a function:
      # we've named the function 'add' and we give it two parameters(inputs to the function)
      def add(a,b):
        x = a + b
        return x  # we return something (more on this later)
